<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Interview on ChrisChen - 尾張</title>
    <link>https://prov1dence.top/categories/interview/</link>
    <description>Recent content in Interview on ChrisChen - 尾張</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Jan 2022 15:37:36 +0800</lastBuildDate>
    <atom:link href="https://prov1dence.top/categories/interview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2022 年初 | 后端开发两年经验社招面经</title>
      <link>https://prov1dence.top/posts/interview/interview/</link>
      <pubDate>Wed, 26 Jan 2022 15:37:36 +0800</pubDate>
      <guid>https://prov1dence.top/posts/interview/interview/</guid>
      <description>&lt;h1 id=&#34;2022-年初--后端开发两年经验社招面经&#34;&gt;2022 年初 | 后端开发两年经验社招面经&lt;/h1&gt;
&lt;h2 id=&#34;字节&#34;&gt;字节&lt;/h2&gt;
&lt;h3 id=&#34;一面&#34;&gt;一面&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;coding: 对于一个数组，仅用一次遍历，等概率地随机出一个元素（对于每一个元素，从全局看，他们被选择的概率都应该是 1/n）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于第 i 个元素，它在第 i 轮被选中的概率是 1/i&lt;/li&gt;
&lt;li&gt;往后，只要选择了新的元素，它就会被淘汰；以第 i+1 轮为例，它被淘汰的概率是 1/(i+1)，那么反过来它被留下的概率就是 1 - 1/(i+1)&lt;/li&gt;
&lt;li&gt;最终每一个元素被选择的概率如下，第一个 1/i 代表它在第 i 次被选中，其他数代表它在后续的每一轮被留下&lt;/li&gt;
&lt;li&gt;&lt;img alt=&#34;1&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/chr1sc2y/warehouse-deprecated/refs/heads/main/resources/interview/1.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;followup：等概率地随机出 k 个元素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于第 i 个元素，它在第 i 轮被选中的概率是 k/i&lt;/li&gt;
&lt;li&gt;往后，它唯一会被淘汰的场景是：选择了新的元素，同时从已有的选择中，等概率地选择到了它；以第 i+1 轮为例，它被淘汰的概率是 k/(i+1) * 1/k = 1/(i+1)，那么反过来它被留下的概率就是 1 - k/(i+1) * 1/k = 1 - 1/(i+1)&lt;/li&gt;
&lt;li&gt;最终每一个元素被选择的概率如下，第一个 k/i 代表它在第 i 次被选中，其他数代表它在后续的每一轮被留下&lt;/li&gt;
&lt;li&gt;&lt;img alt=&#34;2&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/chr1sc2y/warehouse-deprecated/refs/heads/main/resources/interview/2.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;coding: 实现 Fisher–Yates Suffle&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shuffle&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; v)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v.size();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rand() &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        swap(v[i], v[j]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二面&#34;&gt;二面&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;system design：主播开播，如何把这个消息推送给他的千万级 follower
&lt;ul&gt;
&lt;li&gt;设计数据仓库（数据库也可以）&lt;/li&gt;
&lt;li&gt;消息队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;followup：推送之后，主播已经下播，怎么处理&lt;/li&gt;
&lt;li&gt;followup：怎么保证消息推送或被消费&lt;/li&gt;
&lt;li&gt;followup：如何保证消息不重复&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三面&#34;&gt;三面&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DB 迁移流程&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
