<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Consistent Hashing on ChrisChen - 尾張</title>
    <link>https://prov1dence.top/categories/consistent-hashing/</link>
    <description>Recent content in Consistent Hashing on ChrisChen - 尾張</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Oct 2020 23:06:52 +0800</lastBuildDate>
    <atom:link href="https://prov1dence.top/categories/consistent-hashing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>负载均衡和一致性哈希</title>
      <link>https://prov1dence.top/posts/service-governance/load-balancing/</link>
      <pubDate>Sun, 25 Oct 2020 23:06:52 +0800</pubDate>
      <guid>https://prov1dence.top/posts/service-governance/load-balancing/</guid>
      <description>&lt;h1 id=&#34;负载均衡和一致性哈希&#34;&gt;负载均衡和一致性哈希&lt;/h1&gt;
&lt;p&gt;反向代理 reverse proxy 是指以代理服务器来接收由客户端发送来的请求，并通过一定的策略将其转变发给实际处理请求的后端服务器；主要应用于负载均衡、动态缓存、安全认证、内网穿透、SSL 加密等；而负载均衡 load balancing 是指在多个 slot（槽，一般是某种计算资源）中分配负载，以优化资源利用率和避免单点故障问题的方法，是高可用性分布式系统的必备中间件；常用的开源 load balancer 有 nginx，LVS，Haproxy 等；负载均衡可以视为反向代理的一种应用，负载均衡的方法大致可以分为传统负载均衡算法和哈希算法两种，本文简单地总结了这些算法的原理。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;reveser-proxy&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/chr1sc2y/warehouse-deprecated/refs/heads/main/resources/reverse-proxy/reverse-proxy.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-传统负载均衡算法&#34;&gt;1 传统负载均衡算法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;随机 random：将 key 随机分配到某一个 slot 上，根据概率论可知，吞吐量越大，随机算法的效果越好；&lt;/li&gt;
&lt;li&gt;加权随机 weighted random：为每一个 slot 分配一个权重，在随机的时候考虑权重的影响；可以通过在所有 slot 的权重总和中随机出一个数字 k，找到 k 所在的 slot 位置来实现；&lt;/li&gt;
&lt;li&gt;轮询 round robin：按顺序依次将 key 分配给每一个 slot；&lt;/li&gt;
&lt;li&gt;加权轮询 weighted round robin：为每一个 slot 分配一个权重，在按序分配时为权重更高的 slot 分配更多的 key；&lt;/li&gt;
&lt;li&gt;平滑加权轮询 smooth weighted round robin：一种能够均匀地分散调度序列的加权轮询方法，分为以下几个步骤：
&lt;ol&gt;
&lt;li&gt;选出当前权重最高的 slot，将 key 分配给它；&lt;/li&gt;
&lt;li&gt;将选出的 slot 的权重数值减去其初始权重；&lt;/li&gt;
&lt;li&gt;将所有 slot 的权重数值都加上它们的原始权重；&lt;/li&gt;
&lt;li&gt;重复以上步骤；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最少连接数 least connections：将 key 分配给当前具有最少连接数量的 slot；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-mod-n-哈希&#34;&gt;2 Mod-N 哈希&lt;/h2&gt;
&lt;p&gt;在有些场景下，传统负载均衡算法无法满足我们的需求，例如：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
