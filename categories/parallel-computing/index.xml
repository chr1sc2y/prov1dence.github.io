<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Parallel Computing on ChrisChen - 尾張</title>
    <link>https://prov1dence.top/categories/parallel-computing/</link>
    <description>Recent content in Parallel Computing on ChrisChen - 尾張</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Aug 2020 18:32:52 +0800</lastBuildDate>
    <atom:link href="https://prov1dence.top/categories/parallel-computing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>并行计算入门</title>
      <link>https://prov1dence.top/posts/parallel-computing/parallel-computing/</link>
      <pubDate>Wed, 12 Aug 2020 18:32:52 +0800</pubDate>
      <guid>https://prov1dence.top/posts/parallel-computing/parallel-computing/</guid>
      <description>&lt;h1 id=&#34;并行计算入门&#34;&gt;并行计算入门&lt;/h1&gt;
&lt;h2 id=&#34;1-概述&#34;&gt;1 概述&lt;/h2&gt;
&lt;h3 id=&#34;11-并行计算&#34;&gt;1.1 并行计算&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;高性能计算&lt;/strong&gt;（High Performance Computing）是计算机科学中的一个领域，其目的可以概括为&lt;strong&gt;优化性能&lt;/strong&gt;，它包括了缓存技术、数据结构和算法、IO 优化、指令重组（instruction reorganization）、编译器优化等；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并行计算&lt;/strong&gt;（Parallel Computing）是&lt;strong&gt;高性能计算&lt;/strong&gt;下的一个细分领域，其主要思想是将复杂问题分解成若干个部分，将每一个部分交给独立的处理器（计算资源）进行计算，以提高效率；针对不同的问题，并行计算需要专用的并行架构，架构既可以是专门设计的，含有多个处理器的单一硬件或超级计算机，也可以是以某种方式互连的若干台的独立计算机构成的集群；并没有一个统一的并行计算架构适用于每一个问题，如果使用了错误的架构，并行计算甚至会导致性能下降。&lt;/p&gt;
&lt;h3 id=&#34;12-硬件架构&#34;&gt;1.2 硬件架构&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;中央处理器&lt;/strong&gt;（Central Processing Unit）的主要功能是解释计算机指令，它由&lt;strong&gt;控制单元&lt;/strong&gt;（Control Unit）、&lt;strong&gt;算术逻辑单元&lt;/strong&gt;（Arithmetic Logic Unit）、&lt;strong&gt;乱序控制单元&lt;/strong&gt;（Out-of-Order Control Unit）、&lt;strong&gt;分支预测器&lt;/strong&gt;（Branch Predictor）、&lt;strong&gt;数据缓存&lt;/strong&gt;（Data Cache）等部件组成；&lt;strong&gt;CPU&lt;/strong&gt; 被设计为可以快速地处理各种通用计算任务并最小化延迟，但在并发性（时钟频率）方面受到限制；&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;cpu&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/chr1sc2y/warehouse-deprecated/refs/heads/main/resources/parallel-computing/cpu.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图形处理器&lt;/strong&gt;（Graphics Processing Unit, GPU）是英伟达（NVIDIA）在 1999 年 8 月发布 &lt;a href=&#34;https://zh.wikipedia.org/wiki/NVIDIA_GeForce_256&#34;&gt;NVIDIA GeForce 256&lt;/a&gt; 时提出的概念；现代 GPU 的模型设计可以概括为几个关键点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;GPU 的设计目的是最大化吞吐量（Throughput）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能够将程序中数据可并行的部分从 CPU 转移到 GPU&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能够使用尽可能多的线程进行并行计算&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;GPU&lt;/strong&gt; 拥有的&lt;strong&gt;内核&lt;/strong&gt;数量相较于 CPU 多得多，可以有数千个同时运行的内核执行大规模并行计算，因此在早期专门应用于图形数据的处理，但随着近十几年的发展，其强大的并行处理能力也使其可以处理非图形数据，尤其在&lt;strong&gt;深度学习&lt;/strong&gt;领域非常受欢迎；&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;gpu&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/chr1sc2y/warehouse-deprecated/refs/heads/main/resources/parallel-computing/gpu.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在制造工艺的限制下，芯片的密度和最大面积都是有限的（&lt;a href=&#34;%5Bhttps://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B%5D(https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E5%AE%9A%E5%BE%8B)&#34;&gt;摩尔定律&lt;/a&gt;），因此芯片设计实际上是功能和元件数量的权衡；出于对通用性的要求，&lt;strong&gt;CPU&lt;/strong&gt; 的芯片设计必须使用较多种类的原件以增加其功能，同时放弃部分具有复杂功能的元件数量，而 &lt;strong&gt;GPU&lt;/strong&gt; 的芯片设计则是通过移除部分具有复杂功能的元件来换取更多的空间，并集成更多的基本功能元件；&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;process&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/chr1sc2y/warehouse-deprecated/refs/heads/main/resources/parallel-computing/process.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GPU&lt;/strong&gt; 设备由多个&lt;strong&gt;流多处理器&lt;/strong&gt;（Streaming Multiprocessor）的&lt;strong&gt;处理器集群&lt;/strong&gt;（Processor Cluster）组成。每个&lt;strong&gt;流多处理器&lt;/strong&gt;都关联一个&lt;strong&gt;控制单元&lt;/strong&gt; 和 L1 Cache，这样的设计使得一个芯片可以同时支持上百个指令流的并行执行；通常一个&lt;strong&gt;流多处理器&lt;/strong&gt;在与全局 GDDR-5 内存交换数据之前都会利用与之关联 L1 Cache 和 L2 Cache 来减少数据传输的延迟；而又因为 &lt;strong&gt;GPU&lt;/strong&gt; 通常拥有足够大的计算量，使得其不需要与 &lt;strong&gt;CPU&lt;/strong&gt; 一样非常频繁地从内存中获取数据，因此 &lt;strong&gt;GPU&lt;/strong&gt; 的缓存层一般是小于 &lt;strong&gt;CPU&lt;/strong&gt; 的。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
