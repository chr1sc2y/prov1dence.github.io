<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on ChrisChen - 尾張</title>
    <link>https://prov1dence.top/categories/python/</link>
    <description>Recent content in Python on ChrisChen - 尾張</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Aug 2021 17:38:52 +0800</lastBuildDate>
    <atom:link href="https://prov1dence.top/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python 源码学习（5）：协程</title>
      <link>https://prov1dence.top/posts/python/python-source-code-coroutine/</link>
      <pubDate>Wed, 04 Aug 2021 17:38:52 +0800</pubDate>
      <guid>https://prov1dence.top/posts/python/python-source-code-coroutine/</guid>
      <description>&lt;h1 id=&#34;python-源码学习5协程&#34;&gt;Python 源码学习（5）：协程&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;协程&lt;/strong&gt; &lt;em&gt;coroutine&lt;/em&gt; 是一种用户态的轻量级线程，它可以在函数的特定位置暂停或恢复，同时调用者可以从协程中获取状态或将状态传递给协程；Python中的&lt;strong&gt;生成器&lt;/strong&gt; &lt;em&gt;generator&lt;/em&gt; 就是一个典型的协程应用，本文简单地对 Python 中生成器的实现进行分析。&lt;/p&gt;
&lt;h2 id=&#34;1-生成器&#34;&gt;1 生成器&lt;/h2&gt;
&lt;p&gt;如果 Python 中的函数含有 yield 关键字，那么在调用这个函数时，它不会如同普通的函数一样运行到 &lt;code&gt;return&lt;/code&gt; 语句并返回一个变量，而是会立即返回一个生成器对象；以一个斐波那契数列生成函数为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FibonacciSequenceGenerator&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b, a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fsg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FibonacciSequenceGenerator()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(fsg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(type(fsg))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python3 main.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;generator object FibonacciSequenceGenerator at 0x7fb4720b1ac0&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;class &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;generator&amp;#39;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到函数 &lt;code&gt;FibonacciSequenceGenerator&lt;/code&gt; 返回了一个类型为 &lt;code&gt;generator&lt;/code&gt; 的生成器对象 &lt;code&gt;f&lt;/code&gt;；对于生成器对象，我们不能像操作普通函数一样直接进行函数调用，而是要使用 &lt;code&gt;next()&lt;/code&gt; 或 &lt;code&gt;fsg.send()&lt;/code&gt; 来进行函数切换，使得生成器函数开始或继续执行，直到 &lt;code&gt;yield&lt;/code&gt; 所在行或是函数末尾再将执行权交还给调用方：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(next(fsg))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python3 main.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;218922995834555169026&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;354224848179261915075&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;573147844013817084101&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成器的这种行为与线程切换非常类似，它包含了执行，保存，恢复上下文的步骤，用生成器来模拟线程的行为可以避免从用户态到内核态的切换，从而提升效率。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python 源码学习（4）：编译器和虚拟机</title>
      <link>https://prov1dence.top/posts/python/python-source-code-interpreter/</link>
      <pubDate>Wed, 26 May 2021 10:18:52 +0800</pubDate>
      <guid>https://prov1dence.top/posts/python/python-source-code-interpreter/</guid>
      <description>&lt;h1 id=&#34;python-源码学习4编译器和虚拟机&#34;&gt;Python 源码学习（4）：编译器和虚拟机&lt;/h1&gt;
&lt;p&gt;Python 是一种解释型语言，一般在使用前我们会从 Python 官方网站上下载使用 C 语言开发编译的 CPython 解释器，本文用到的源码均来自 &lt;a href=&#34;https://github.com/python/cpython&#34;&gt;CPython&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python 解释器&lt;/strong&gt;（&lt;em&gt;Python Interpreter&lt;/em&gt;）由 &lt;strong&gt;Python 编译器&lt;/strong&gt;（&lt;em&gt;Python Compiler&lt;/em&gt;）和 &lt;strong&gt;Python 虚拟机&lt;/strong&gt;（&lt;em&gt;Python Virutal Machine&lt;/em&gt;）两部分组成。当我们通过 Python 命令执行 Python 代码时，Python 编译器会将 Python 代码编译为 &lt;strong&gt;Python 字节码&lt;/strong&gt;（&lt;em&gt;&lt;a href=&#34;https://www.quora.com/What-is-the-difference-between-byte-code-and-machine-code-and-what-are-its-advantages&#34;&gt;bytecode&lt;/a&gt;&lt;/em&gt;）；随后 Python 虚拟机会读取并逐步执行这些字节码。&lt;/p&gt;
&lt;h2 id=&#34;1-python-编译器&#34;&gt;1 Python 编译器&lt;/h2&gt;
&lt;h3 id=&#34;11-代码对象&#34;&gt;1.1 代码对象&lt;/h3&gt;
&lt;p&gt;Python 提供了内置函数 &lt;code&gt;compile&lt;/code&gt;，可以编译 Python 代码并生成一个包含字节码信息的对象，举例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# test.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Square&lt;/span&gt;(a):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;result:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;Square(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# main.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test.py&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; compile(open(f)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(), f, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;exec(code_obj)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code_obj:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;code_obj&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;type(code_obj)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python3 main.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result:         &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;code_obj:       &amp;lt;code object &amp;lt;module&amp;gt; at 0x7f052c156b30, file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test.py&amp;#34;&lt;/span&gt;, line 1&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type:           &amp;lt;class &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到生成的 &lt;code&gt;code_obj&lt;/code&gt; 对象的类型是 &lt;code&gt;class &#39;code&#39;&lt;/code&gt;，它在源码中对应的结构体是&lt;strong&gt;代码对象&lt;/strong&gt; &lt;em&gt;PyCodeObject&lt;/em&gt;；代码对象是后续步骤中 Python 虚拟机操作的核心，它将字节码相关的参数个数、局部变量、变量名称、指令序列等信息包装成了一个结构体：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python 源码学习（3）：list 类型</title>
      <link>https://prov1dence.top/posts/python/source-code-3-list-and-dict/</link>
      <pubDate>Thu, 06 May 2021 20:07:52 +0800</pubDate>
      <guid>https://prov1dence.top/posts/python/source-code-3-list-and-dict/</guid>
      <description>&lt;h1 id=&#34;python-源码学习3list-类型&#34;&gt;Python 源码学习（3）：list 类型&lt;/h1&gt;
&lt;p&gt;Python 中的 list 类型在源码中是一个名为 &lt;code&gt;PyListObject&lt;/code&gt; 的结构体，定义在 &lt;code&gt;listobject.h&lt;/code&gt; 文件中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Include/cpython/listobject.h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PyObject_VAR_HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* Vector of pointers to list elements.  list[0] is ob_item[0], etc. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PyObject &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;ob_item;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/* ob_item contains space for &amp;#39;allocated&amp;#39; elements.  The number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * currently in use is ob_size.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Invariants:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *     0 &amp;lt;= ob_size &amp;lt;= allocated
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *     len(list) == ob_size
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *     ob_item == NULL implies ob_size == allocated == 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * list.sort() temporarily sets allocated to -1 to detect mutations.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Items must normally not be NULL, except during construction when
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * the list is not yet visible outside the function that builds it.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Py_ssize_t allocated;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} PyListObject;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的实现和 C++ 中的 &lt;code&gt;std::vector&lt;/code&gt; 类似，都是通过维护一个动态数组，在增加数据的时候动态扩大数组的容量来实现的；&lt;code&gt;PyListObject&lt;/code&gt; 结构中包含了一个变长对象头部 &lt;code&gt;PyObject_VAR_HEAD&lt;/code&gt;，&lt;code&gt;ob_size&lt;/code&gt; 表示当前动态数组的长度，&lt;code&gt;**ob_item&lt;/code&gt; 是指向动态数组的指针，&lt;code&gt;allocated&lt;/code&gt; 是动态数组的容量；我们可以从它的类型指针 &lt;code&gt;PyTypeObject PyList_Type&lt;/code&gt; 中找到用来操作 list 对象的相关方法：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python 源码学习（2）：int 类型</title>
      <link>https://prov1dence.top/posts/python/source-code-2/</link>
      <pubDate>Wed, 31 Mar 2021 15:37:52 +0800</pubDate>
      <guid>https://prov1dence.top/posts/python/source-code-2/</guid>
      <description>&lt;h1 id=&#34;python-源码学习2int-类型&#34;&gt;Python 源码学习（2）：int 类型&lt;/h1&gt;
&lt;p&gt;Python 中的标准数据类型有六种，分别是 number, string, list, tuple, set, dictionary，前文已经阐述过它们的对象类型都是继承了 &lt;code&gt;PyBaseObject_Type&lt;/code&gt; 类型的 &lt;code&gt;PyType_Type&lt;/code&gt; 类型的实例对象，本文则主要探究 Python 中 int 类型的实现。&lt;/p&gt;
&lt;p&gt;不同于 C 和 C++ 中的 &lt;code&gt;int&lt;/code&gt; 类型，Python 中的 &lt;code&gt;int&lt;/code&gt; 类型最大的特点是它一般是&lt;strong&gt;不会溢出&lt;/strong&gt;的，对比用 C 和 Python 分别输出两个一百万相乘的结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000000000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; print(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10000000000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 C 语言中会发生溢出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-727379968
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3567587328&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-int-类型在内存中的存储方式&#34;&gt;1 int 类型在内存中的存储方式&lt;/h2&gt;
&lt;h3 id=&#34;11-内存结构&#34;&gt;1.1 内存结构&lt;/h3&gt;
&lt;p&gt;Python 中的 &lt;code&gt;int&lt;/code&gt; 整数类型实际上是一个名为 &lt;code&gt;PyLongObject&lt;/code&gt;  的结构体，定义在 &lt;code&gt;longintrepr.h&lt;/code&gt; 文件中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Include/object.h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PyObject_VAR_HEAD      PyVarObject ob_base;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Objects/longobject.h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if PYLONG_BITS_IN_DIGIT == 30
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; digit;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#elif PYLONG_BITS_IN_DIGIT == 15
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; digit;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_longobject&lt;/span&gt; PyLongObject; &lt;span style=&#34;color:#75715e&#34;&gt;/* Revealed in longintrepr.h */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Include/longintrepr.h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_longobject&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PyObject_VAR_HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    digit ob_digit[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它由两部分组成，分别是：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python 源码学习（1）：类型和对象</title>
      <link>https://prov1dence.top/posts/python/source-code-1/</link>
      <pubDate>Sun, 14 Mar 2021 16:05:52 +0800</pubDate>
      <guid>https://prov1dence.top/posts/python/source-code-1/</guid>
      <description>&lt;h1 id=&#34;python-源码学习1类型和对象&#34;&gt;Python 源码学习（1）：类型和对象&lt;/h1&gt;
&lt;p&gt;Python 是一门解释型，动态类型，多范式的编程语言，当我们从 &lt;a href=&#34;https://www.python.org/&#34;&gt;python.org&lt;/a&gt; 下载并安装运行 Python 的某个分发版本时，我们实际上是在运行由 C 语言编写的 &lt;a href=&#34;https://github.com/python/cpython&#34;&gt;CPython&lt;/a&gt;，除此之外 Python 的运行时还有 Jython, PyPy, Cython 等；CPython 的源码中有一系列的库，组件和工具：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://github.com/python/cpython
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tree -d -L &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;-- cpython
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |-- Doc			&lt;span style=&#34;color:#75715e&#34;&gt;# 文档&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |-- Grammar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |-- Include 	&lt;span style=&#34;color:#75715e&#34;&gt;# C 头文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |-- Lib			&lt;span style=&#34;color:#75715e&#34;&gt;# 用 Python 写的库文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |-- Mac			&lt;span style=&#34;color:#75715e&#34;&gt;# 用于在 macOS 上构建的文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |-- Misc		&lt;span style=&#34;color:#75715e&#34;&gt;# 杂项&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |-- Modules		&lt;span style=&#34;color:#75715e&#34;&gt;# 用 C 写的库文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |-- Objects 	&lt;span style=&#34;color:#75715e&#34;&gt;# 核心类型，以及对象模型的定义&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |-- PC			&lt;span style=&#34;color:#75715e&#34;&gt;# 用于在 Windows 上构建的文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |-- PCbuild 	&lt;span style=&#34;color:#75715e&#34;&gt;# 用于在老版本的 Windows 上构建的文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |-- Parser		&lt;span style=&#34;color:#75715e&#34;&gt;# Python 解析器源码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |-- Programs	&lt;span style=&#34;color:#75715e&#34;&gt;# Python 可执行文件和其他&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |-- Python		&lt;span style=&#34;color:#75715e&#34;&gt;# CPython 编译器源码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |-- Tools		&lt;span style=&#34;color:#75715e&#34;&gt;# 构建时的工具&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;-- m4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; directories
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;本系列主要以阅读和分析 CPython 源码的方式学习 Python。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode Archiver(3)： 登录</title>
      <link>https://prov1dence.top/posts/leetcode-archiver/leetcode-archiver3/</link>
      <pubDate>Fri, 11 Jan 2019 13:15:17 +1100</pubDate>
      <guid>https://prov1dence.top/posts/leetcode-archiver/leetcode-archiver3/</guid>
      <description>&lt;h2 id=&#34;cookie和session&#34;&gt;Cookie和Session&lt;/h2&gt;
&lt;p&gt;为了获取我们自己的提交记录，我们首先要进行登录的操作。但我们都知道HTTP是一种无状态的协议，它的每个请求都是独立的。无论是GET还是POST请求，都包含了处理当前这一条请求的所有信息，但它并不会涉及到状态的变化。因此，为了在无状态的HTTP协议上维护一个持久的状态，引入了Cookie和Session的概念，两者都是为了辨识用户相关信息而储存在内存或硬盘上的加密数据。&lt;/p&gt;
&lt;p&gt;Cookie是由客户端浏览器维护的。客户端浏览器会在需要时把Cookie保存在内存中，当其再次向该域名相关的网站发出request时，浏览器会把url和Cookie一起作为request的一部分发送给服务器。服务器通过解析该Cookie来确认用户的状态，并对Cookie的内容作出相应的修改。一般来说，如果不设置过期时间，非持久Cookie会保存在内存中，浏览器关闭后就被删除了。&lt;/p&gt;
&lt;p&gt;Session是由服务器维护的。当客户端第一次向服务器发出request后，服务器会为该客户端创建一个Session。当该客户端再次访问服务器时，服务器会根据该Session来获取相关信息。一般来说，服务器会为Seesion设置一个失效时间，当距离接收到客户端上一次发送request的时间超过这个失效时间后，服务器会主动删除Session。&lt;/p&gt;
&lt;p&gt;两种方法都可以用来维护登录的状态。为了简便起见，本项目目前使用Session作为维护登录状态的方法。&lt;/p&gt;
&lt;h2 id=&#34;获取数据&#34;&gt;获取数据&lt;/h2&gt;
&lt;h3 id=&#34;分析&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;首先我们进入&lt;a href=&#34;https://leetcode.com/accounts/login/&#34;&gt;登录页面&lt;/a&gt;，打开开发者工具，勾选Preserve log。为了知道在登录时浏览器向服务器提交了哪些数据，我们可以先输入一个错误的用户名和密码，便于抓包。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;7&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/chr1sc2y/warehouse-deprecated/refs/heads/main/resources/Use-Scrapy-to-Crawl-LeetCode/7.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过分析&amp;quot;login/&amp;ldquo;这条request，我们可以知道我们所需要的一些关键信息，例如headers中的user-agent和referer，表单数据（form data）中的csrfmiddlewaretoken，login和password。显然，user-agent和referer我们可以直接复制下来，login和password是我们填写的用户名和密码。还有一个很陌生的csrfmiddlewaretoken。这是CSRF的中间件token，CSRF是Cross-Site Request Forgery，相关知识可以查询&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0&#34;&gt;跨站请求伪造的维基百科&lt;/a&gt;。那么现在我们就要分析这个token是从何而来。&lt;/p&gt;
&lt;h4 id=&#34;获取csrfmiddlewaretoken&#34;&gt;获取csrfmiddlewaretoken&lt;/h4&gt;
&lt;p&gt;我们将刚才获取到的csrfmiddlewaretoken复制下来，在开发者工具中使用搜索功能，可以发现这个csrfmiddlewaretoken出现在了登录之前的一些request对应的response中。例如在刚才打开登录页面，发送GET请求时，response的headers的set-cookie中出现了&amp;quot;csrftoken=&amp;hellip;&amp;ldquo;，而这里csrftoken的值与我们需要在登录表单中提交的值完全相同。因此，我们可以通过获取刚才的response中的Cookies来获取csrfmiddlewaretoken的值。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;8&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/chr1sc2y/warehouse-deprecated/refs/heads/main/resources/Use-Scrapy-to-Crawl-LeetCode/8.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先我们通过发送GET请求来分析一下Cookies的构成&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;login_url = &amp;#34;https://leetcode.com/accounts/login/&amp;#34;
session = requests.session()
result = session.get(login_url)
print(result)
print(type(result.cookies))
for cookie in result.cookies:
    print(type(cookie))
    print(cookie)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;得到的结果是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Response [200]&amp;gt;&lt;/code&gt; 状态码200，表示请求成功&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;class &#39;requests.cookies.RequestsCookieJar&#39;&amp;gt;&lt;/code&gt; cookies的类型是CookieJar&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;class &#39;http.cookiejar.Cookie&#39;&amp;gt;&lt;/code&gt; 第一条cookie的类型是Cookie&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Cookie__cfduid=d3e02d4309b848f9369e21671fabbce571548041181 for .leetcode.com/&amp;gt;&lt;/code&gt; 第一条cookie的信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;class &#39;http.cookiejar.Cookie&#39;&amp;gt;&lt;/code&gt; 第二条cookie的类型是Cookie&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Cookie csrftoken=13mQWE9tYN6g2IrlKY8oMLRc4VhVNoet4j328YdDapW2WC2nf93y5iCuzorovTDl for leetcode.com/&amp;gt;&lt;/code&gt; 第二条cookie的信息，也就是我们所需要的csrftoken&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样一来我们便获取到了在提交表单信息时所需要的csrfmiddlewaretoken，之后我们便可以开始着手写登录的相关代码了。顺便一提，在使用Django进行后端开发的时候自动生成的csrf token的键也叫csrfmiddlewaretoken，不知道LeetCode是不是用Django作为后端开发框架的。&lt;/p&gt;
&lt;h3 id=&#34;实现&#34;&gt;实现&lt;/h3&gt;
&lt;p&gt;首先我们需要在爬虫开始运行之前获取登录信息，将Session作为类的成员变量保存下来，方便在获取submissions时使用。同时我们需要在与爬虫文件相同的目录下新建config.json，将自己的用户名和密码保存在该json文件里，这样就能顺利登陆了。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    def start_requests(self):
        self.Login()    # 登录
        questionset_url = &amp;#34;https://leetcode.com/api/problems/all/&amp;#34;
        yield scrapy.Request(url=questionset_url, callback=self.ParseQuestionSet)

    def Login(self):
    login_url = &amp;#34;https://leetcode.com/accounts/login/&amp;#34;
    login_headers = {
        &amp;#34;user_agent&amp;#34;: &amp;#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&amp;#39;&amp;#34;,
        &amp;#34;referer&amp;#34;: &amp;#34;https://leetcode.com/accounts/login/&amp;#34;,
        # &amp;#34;content-type&amp;#34;: &amp;#34;multipart/form-data; boundary=----WebKitFormBoundary70YlQBtroATwu9Jx&amp;#34;
    }
    self.session = requests.session()
    result = self.session.get(login_url)
    file = open(&amp;#39;./config.json&amp;#39;, &amp;#39;r&amp;#39;)
    info = json.load(file)
    data = {&amp;#34;login&amp;#34;: info[&amp;#34;username&amp;#34;], &amp;#34;password&amp;#34;: inf[&amp;#34;password&amp;#34;],
            &amp;#34;csrfmiddlewaretoken&amp;#34;: self.session.cookies[&amp;#39;csrftoken&amp;#39;]}
    self.session.post(login_url, data=data,headers=login_headers)
    print(&amp;#34;login info: &amp;#34; + str(result))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意如果在headers中填写了content-type的值，可能会产生一些奇怪的错误信息，并且后续不能正确地获取自己的submissions，只需要user_agent和refere的信息即可。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode Archiver(2)：获取题目信息</title>
      <link>https://prov1dence.top/posts/leetcode-archiver/leetcode-archiver2/</link>
      <pubDate>Fri, 21 Dec 2018 15:06:01 +1100</pubDate>
      <guid>https://prov1dence.top/posts/leetcode-archiver/leetcode-archiver2/</guid>
      <description>&lt;h2 id=&#34;创建爬虫&#34;&gt;创建爬虫&lt;/h2&gt;
&lt;p&gt;在新建好项目后，用PyCharm或其他IDE打开该项目。进入该项目文件夹，使用&lt;code&gt;genspider&lt;/code&gt;命令新建一个爬虫：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd scrapy_project
scrapy genspider QuestionSetSpider leetcode.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中QuestionSetSpider是爬虫的名字，leetcode.com是我们打算爬取的网站的域名。&lt;/p&gt;
&lt;p&gt;新建好爬虫之后可以看到在项目的spiders文件夹下新增了一个名为 QuestionSetSpider.py的文件，这就是我们刚才新建的爬虫文件。这个爬虫文件会自动生成以下代码&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# -*- coding: utf-8 -*-
import scrapy

class QuestionSetSpider(scrapy.Spider):
    name = &amp;#39;QuestionSetSpider&amp;#39;
    allowed_domains = [&amp;#39;leetcode.com&amp;#39;]
    start_urls = [&amp;#39;http://leetcode.com/&amp;#39;]

    def parse(self, response):
        pass
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;QuestionSetSpider类继承自scrapy.Spider，也就是scrapy框架中所有爬虫的基类；&lt;/li&gt;
&lt;li&gt;self.name属性是该爬虫的名字，在该爬虫文件的外部可以通过这个属性获取当前爬虫；&lt;/li&gt;
&lt;li&gt;self.allowed_domains是当前爬虫文件可以访问的域名列表，如果在爬取页面时进入了一个该域名以外的url会抛出错误；&lt;/li&gt;
&lt;li&gt;self.start_urls是一个url列表，基类中定义了start_requests函数，它会遍历self.start_urls，并对每一个url调用scrapy.Request(url, dont_filter=True)，为了实现爬取题目的需求，我们需要重写self.start_urls函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;获取题目详细信息&#34;&gt;获取题目详细信息&lt;/h2&gt;
&lt;h3 id=&#34;分析&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;LeetCode使用了GraphQL进行数据的查询和传输，大部分页面都是通过JS渲染生成的动态页面，所以无法直接从页面上获取标签，即使使用提供JavaScript渲染服务的库（例如Splash）也无法获取全部的数据，所以只能通过发送请求来获取数据。&lt;/p&gt;
&lt;p&gt;为了爬取题目的详细信息，我们首先要从题目列表进入每个题目对应的链接。&lt;/p&gt;
&lt;p&gt;首先打开leetcode的&lt;a href=&#34;https://leetcode.com/problemset/all/&#34;&gt;problem&lt;/a&gt;列表，按F12打开Chrome的开发者工具，进入Network标签栏，勾选上Preserve log，刷新该页面。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;1&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/chr1sc2y/warehouse-deprecated/refs/heads/main/resources/Use-Scrapy-to-Crawl-LeetCode/1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，网页向 &lt;a href=&#34;https://leetcode.com/api/problems/all/&#34;&gt;https://leetcode.com/api/problems/all/&lt;/a&gt; 发送了一个名为&amp;quot;all/&amp;ldquo;的GET类型的Request，这就是获取所有题目链接和相关信息的请求。如果此时已经安装了Toggle JavaScript插件，我们可以直接右键点击“Open in new tab”，查看该请求返回的Response。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;2&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/chr1sc2y/warehouse-deprecated/refs/heads/main/resources/Use-Scrapy-to-Crawl-LeetCode/2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;更方便的方法是使用postman向服务器发送一个相同的Request，并将其保存下来，这样如果我们下次需要查看相应的Response的时候就不需要再使用开发者工具了。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;3&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/chr1sc2y/warehouse-deprecated/refs/heads/main/resources/Use-Scrapy-to-Crawl-LeetCode/3.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;返回的Response是一个json对象，其中的&amp;quot;stat_status_pairs&amp;quot;键所对应的值是所有包含题目信息的list，而列表中的[&amp;ldquo;stat&amp;rdquo;][&amp;ldquo;question__title_slug&amp;rdquo;]就是题目所在的页面。以Largest Perimeter Triangle为例，将其title_slug拼接到https://leetcode.com/problems/ 后，进入页面https://leetcode.com/problems/largest-perimeter-triangle/ 。同样地，打开开发者工具，刷新页面，可以看到服务器返回了很多项graphql的查询数据，通过查看Request Payload可以找到其中operationName为&amp;quot;questionData&amp;quot;的一项，这就是当前题目的详细信息。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;4&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/chr1sc2y/warehouse-deprecated/refs/heads/main/resources/Use-Scrapy-to-Crawl-LeetCode/4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;将Payload复制粘贴到postman的Body中，在Headers中设置Content-Type为application/json，发送请求，可以看到返回的是一个json对象，包含了该题目所对应的所有信息。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;5&#34; loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/chr1sc2y/warehouse-deprecated/refs/heads/main/resources/Use-Scrapy-to-Crawl-LeetCode/5.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来我们就可以对该题目的信息进行处理了。&lt;/p&gt;
&lt;h3 id=&#34;实现&#34;&gt;实现&lt;/h3&gt;
&lt;p&gt;为了获取题目列表的json对象，我们需要先重写start_requests函数。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def start_requests(self):
        self.Login() # 用户登录，后续会用到
        questionset_url = &amp;#34;https://leetcode.com/api/problems/all/&amp;#34;
        yield scrapy.Request(url=questionset_url, callback=self.ParseQuestionSet)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Request是scrapy的一个类对象，功能类似于requests库中的get函数，可以让scrapy框架中的Downloader向url发送一个get请求，并将获取的response交给指定的爬虫文件中的回调函数进行相应的处理，其构造函数如下&lt;/p&gt;</description>
    </item>
    <item>
      <title>LeetCode Archiver(1)：Scrapy框架和Requests库</title>
      <link>https://prov1dence.top/posts/leetcode-archiver/leetcode-archiver1/</link>
      <pubDate>Tue, 04 Dec 2018 11:25:15 +1100</pubDate>
      <guid>https://prov1dence.top/posts/leetcode-archiver/leetcode-archiver1/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Scrapy官方文档对Scrapy的介绍如下：&lt;/p&gt;
&lt;p&gt;Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。&lt;br&gt;其最初是为了页面抓取（更确切来说, 网络抓取）所设计的，也可以应用在获取API所返回的数据（例如 Amazon Associates Web Services ）或者通用的网络爬虫。&lt;/p&gt;
&lt;p&gt;简而言之，Scrapy是基于Twisted库开发的，封装了http请求、代理信息、数据存储等功能的Python爬虫框架。&lt;/p&gt;
&lt;h2 id=&#34;组件和数据流&#34;&gt;组件和数据流&lt;/h2&gt;
&lt;p&gt;下图是Scrapy官方文档中的架构概览图：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Architecture&#34; loading=&#34;lazy&#34; src=&#34;https://scrapy-chs.readthedocs.io/zh_CN/0.24/_images/scrapy_architecture.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中绿色箭头表示&lt;a href=&#34;#head&#34;&gt;数据流&lt;/a&gt;，其他均为组件。&lt;/p&gt;
&lt;h3 id=&#34;scrapy-engine引擎&#34;&gt;Scrapy Engine（引擎）&lt;/h3&gt;
&lt;p&gt;引擎负责控制数据流在系统的组件中流动，并在相应动作发生时触发事件。&lt;/p&gt;
&lt;h3 id=&#34;scheduler调度器&#34;&gt;Scheduler（调度器）&lt;/h3&gt;
&lt;p&gt;调度器从引擎接收request并将其保存，以便在引擎请求时提供给引擎。&lt;/p&gt;
&lt;h3 id=&#34;downloader下载器&#34;&gt;Downloader（下载器）&lt;/h3&gt;
&lt;p&gt;下载器负责下载页面数据，并将其提供给引擎，而后再由引擎提供给爬虫。&lt;/p&gt;
&lt;h3 id=&#34;spiders爬虫&#34;&gt;Spiders（爬虫）&lt;/h3&gt;
&lt;p&gt;Spider是由用户编写的用于&lt;strong&gt;分析response&lt;/strong&gt;并&lt;strong&gt;提取item&lt;/strong&gt;或额外&lt;strong&gt;跟进url&lt;/strong&gt;的类。一个Scrapy项目中可以有很多Spider，他们分别被用于爬取不同的页面和网站。&lt;/p&gt;
&lt;h3 id=&#34;item-pipeline管道&#34;&gt;Item Pipeline（管道）&lt;/h3&gt;
&lt;p&gt;Item Pipeline负责处理被爬虫&lt;strong&gt;提取出来的item&lt;/strong&gt;。可以对其进行数据清洗，验证和持久化（例如存储到数据库中）。&lt;/p&gt;
&lt;h3 id=&#34;downloader-middlewares下载器中间件&#34;&gt;Downloader middlewares（下载器中间件）&lt;/h3&gt;
&lt;p&gt;下载器中间件是在引擎及下载器之间的组件，用于处理下载器传递给引擎的response。更多内容请参考&lt;a href=&#34;https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/downloader-middleware.html#topics-downloader-middleware&#34;&gt;下载器中间件&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;spider-middlewares爬虫中间件&#34;&gt;Spider middlewares（爬虫中间件）&lt;/h3&gt;
&lt;p&gt;Spider中间件是在引擎及Spider之间的组件，用于处理爬虫的输入（response）和输出（items和requests）。更多内容请参考&lt;a href=&#34;https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/spider-middleware.html#topics-spider-middleware&#34;&gt;爬虫中间件&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;a-idhead-data-flow数据流a&#34;&gt;&lt;a id=&#34;head&#34;/&gt; Data flow（数据流）&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Scrapy中的数据流由引擎控制，其过程如下:&lt;br&gt;
1.引擎打开一个网站，找到处理该网站的爬虫并向该爬虫请求要爬取的url。&lt;br&gt;
2.引擎从爬虫中获取到要爬取的url并将其作为request发送给调度器。&lt;br&gt;
3.引擎向调度器请求下一个要爬取的url。&lt;br&gt;
4.调度器返回下一个要爬取的url给引擎，引擎将url通过下载器中间件发送给下载器。&lt;br&gt;
5.下载器下载页面成功后，生成一个该页面的response对象，并将其通过下载器中间件发送给引擎。&lt;br&gt;
6.引擎接收从下载器中间件发送过来的response，并将其通过爬虫中间件发送给爬虫处理。&lt;br&gt;
7.爬虫处理response，并将爬取到的item及跟进的新的request发送给引擎。&lt;br&gt;
8.引擎将爬虫返回的item发送给管道，将爬虫返回的新的request发送给调度器。&lt;br&gt;
9.管道对item进行相应的处理。&lt;br&gt;
10.重复第二步，直到调度器中没有更多的request，此时引擎关闭该网站。&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;1.下载安装最新版的&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.使用pip指令安装Scrapy&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip3 install scrapy
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;创建项目&#34;&gt;创建项目&lt;/h2&gt;
&lt;p&gt;首先进入你的代码存储目录，在命令行中输入以下命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scrapy startproject LeetCode_Crawler
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意项目名称是不能包含连字符 &amp;lsquo;-&amp;rsquo; 的&lt;/p&gt;
&lt;p&gt;新建成功后，可以看到在当前目录下新建了一个名为LeetCode_Crawler的Scrapy项目，进入该目录，其项目结构如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scrapy.cfg              #该项目的配置文件
scrapy_project          #该项目的Python模块
    __init__.py
    items.py            #可自定义的item类文件
    middlewares.py      #中间件文件
    pipelines.py        #管道文件
    settings.py         #设置文件
    __pycache__
    spiders             #爬虫文件夹，所有爬虫文件都应在该文件夹下
        __init__.py
        __pycache__
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至此Scrapy项目的创建就完成了。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
